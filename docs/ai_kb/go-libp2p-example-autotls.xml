This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: examples/autotls/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
examples/
  autotls/
    .gitignore
    identity.go
    main.go
    README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="examples/autotls/.gitignore">
autotls
p2p-forge-certs/
identity.key
</file>

<file path="examples/autotls/identity.go">
package main
⋮----
import (
	"os"

	"github.com/libp2p/go-libp2p/core/crypto"
)
⋮----
"os"
⋮----
"github.com/libp2p/go-libp2p/core/crypto"
⋮----
// LoadIdentity reads a private key from the given path and, if it does not
// exist, generates a new one.
func LoadIdentity(keyPath string) (crypto.PrivKey, error)
⋮----
// ReadIdentity reads a private key from the given path.
func ReadIdentity(path string) (crypto.PrivKey, error)
⋮----
// GenerateIdentity writes a new random private key to the given path.
func GenerateIdentity(path string) (crypto.PrivKey, error)
</file>

<file path="examples/autotls/main.go">
package main
⋮----
import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"time"

	"github.com/caddyserver/certmagic"
	"github.com/ipfs/go-log/v2"

	p2pforge "github.com/ipshipyard/p2p-forge/client"
	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/p2p/transport/tcp"
	ws "github.com/libp2p/go-libp2p/p2p/transport/websocket"
)
⋮----
"context"
"fmt"
"os"
"os/signal"
"time"
⋮----
"github.com/caddyserver/certmagic"
"github.com/ipfs/go-log/v2"
⋮----
p2pforge "github.com/ipshipyard/p2p-forge/client"
"github.com/libp2p/go-libp2p"
dht "github.com/libp2p/go-libp2p-kad-dht"
"github.com/libp2p/go-libp2p/p2p/transport/tcp"
ws "github.com/libp2p/go-libp2p/p2p/transport/websocket"
⋮----
var logger = log.Logger("autotls-example")
⋮----
const userAgent = "go-libp2p/example/autotls"
const identityKeyFile = "identity.key"
⋮----
func main()
⋮----
// Create a background context
⋮----
log.SetLogLevel("autotls-example", "debug") // Set the log level for the example to debug
log.SetLogLevel("basichost", "info")        // Set the log level for the basichost package to info
log.SetLogLevel("autotls", "debug")         // Set the log level for the autotls-example package to debug
log.SetLogLevel("p2p-forge", "debug")       // Set the log level for the p2pforge package to debug
log.SetLogLevel("nat", "debug")             // Set the log level for the libp2p nat package to debug
⋮----
certLoaded := make(chan bool, 1) // Create a channel to signal when the cert is loaded
⋮----
// use dedicated logger for autotls feature
⋮----
// p2pforge is the AutoTLS client library.
// The cert manager handles the creation and management of certificate
⋮----
// Configure CA ACME endpoint
// NOTE:
// This example uses Let's Encrypt staging CA (p2pforge.DefaultCATestEndpoint)
// which will not work correctly in browser, but is useful for initial testing.
// Production should use Let's Encrypt production CA (p2pforge.DefaultCAEndpoint).
p2pforge.WithCAEndpoint(p2pforge.DefaultCATestEndpoint), // test CA endpoint
// TODO: p2pforge.WithCAEndpoint(p2pforge.DefaultCAEndpoint),  // production CA endpoint
⋮----
// Configure where to store certificate
⋮----
// Configure logger to use
⋮----
// User-Agent to use during DNS-01 ACME challenge
⋮----
// Optional hook called once certificate is ready
⋮----
// Start the cert manager
⋮----
// Load or generate a persistent peer identity key
⋮----
libp2p.Identity(privKey), // Use the loaded identity key
libp2p.DisableRelay(),    // Disable relay, since we need a public IP address
libp2p.NATPortMap(),      // Attempt to open ports using UPnP for NATed hosts.
⋮----
"/ip4/0.0.0.0/tcp/5500", // regular TCP IPv4 connections
"/ip6/::/tcp/5500",      // regular TCP IPv6 connections
⋮----
// Configure Secure WebSockets listeners on the same TCP port
// AutoTLS will automatically generate a certificate for this host
// and use the forge domain (`libp2p.direct`) as the SNI hostname.
⋮----
// Configure the TCP transport
⋮----
// Share the same TCP listener between the TCP and WS transports
⋮----
// Configure the WS transport with the AutoTLS cert manager
⋮----
// Configure user agent for libp2p identify protocol (https://github.com/libp2p/specs/blob/master/identify/README.md)
⋮----
// AddrsFactory takes the multiaddrs we're listening on and sets the multiaddrs to advertise to the network.
// We use the AutoTLS address factory so that the `*` in the AutoTLS address string is replaced with the
// actual IP address of the host once detected
⋮----
// Bootstrap the DHT to verify our public IPs address with AutoNAT
⋮----
// Wait for peers to verify public address with AutoNAT
⋮----
// Wait for interrupt signal
</file>

<file path="examples/autotls/README.md">
# libp2p host with Secure WebSockets and AutoTLS

This example builds on the [libp2p host example](../libp2p-host) example and demonstrates how to use [AutoTLS](https://blog.ipfs.tech/2024-shipyard-improving-ipfs-on-the-web/#autotls-with-libp2p-direct) to automatically generate a wildcard Let's Encrypt TLS certificate unique to the libp2p host (`*.<PeerID>.libp2p.direct`), and use it with [libp2p WebSockets transport over TCP](https://github.com/libp2p/specs/blob/master/websockets/README.md) enabling browsers to directly connect to the libp2p host.

For this example to work, you need to have a public IP address and be publicly reachable. AutoTLS is guarded by connectivity check, and will not ask for a certificate unless your libp2p node emits `event.EvtLocalReachabilityChanged` with `network.ReachabilityPublic`.

## Running the example

From the `go-libp2p/examples` directory run the following:

```sh
cd autotls/
go run .
```
</file>

</files>
