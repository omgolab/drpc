This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: examples/chat/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
examples/
  chat/
    .gitignore
    chat_test.go
    chat.go
    README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="examples/chat/.gitignore">
chat
</file>

<file path="examples/chat/chat_test.go">
package main
⋮----
import (
	"context"
	"crypto/rand"
	"fmt"
	"log"
	"testing"
	"time"

	"github.com/libp2p/go-libp2p/core/network"

	"github.com/libp2p/go-libp2p/examples/testutils"
)
⋮----
"context"
"crypto/rand"
"fmt"
"log"
"testing"
"time"
⋮----
"github.com/libp2p/go-libp2p/core/network"
⋮----
"github.com/libp2p/go-libp2p/examples/testutils"
⋮----
func TestMain(t *testing.T)
⋮----
var h testutils.LogHarness
⋮----
// Create a context that will stop the hosts when the tests end
⋮----
// Sleep a bit to let h2 print the logs we're waiting for
⋮----
cancel() // end the test
</file>

<file path="examples/chat/chat.go">
/*
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Juan Batiz-Benet
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This program demonstrate a simple chat application using p2p communication.
 *
 */
package main
⋮----
import (
	"bufio"
	"context"
	"crypto/rand"
	"flag"
	"fmt"
	"io"
	"log"
	mrand "math/rand"
	"os"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/core/peerstore"

	"github.com/multiformats/go-multiaddr"
)
⋮----
"bufio"
"context"
"crypto/rand"
"flag"
"fmt"
"io"
"log"
mrand "math/rand"
"os"
⋮----
"github.com/libp2p/go-libp2p"
"github.com/libp2p/go-libp2p/core/crypto"
"github.com/libp2p/go-libp2p/core/host"
"github.com/libp2p/go-libp2p/core/network"
"github.com/libp2p/go-libp2p/core/peer"
"github.com/libp2p/go-libp2p/core/peerstore"
⋮----
"github.com/multiformats/go-multiaddr"
⋮----
func handleStream(s network.Stream)
⋮----
// Create a buffer stream for non-blocking read and write.
⋮----
// stream 's' will stay open until you close it (or the other side closes it).
⋮----
func readData(rw *bufio.ReadWriter)
⋮----
// Green console colour: 	\x1b[32m
// Reset console colour: 	\x1b[0m
⋮----
func writeData(rw *bufio.ReadWriter)
⋮----
func main()
⋮----
// If debug is enabled, use a constant random source to generate the peer ID. Only useful for debugging,
// off by default. Otherwise, it uses rand.Reader.
var r io.Reader
⋮----
// Use the port number as the randomness source.
// This will always generate the same host ID on multiple executions, if the same port number is used.
// Never do this in production code.
⋮----
// Create a thread to read and write data.
⋮----
// Wait forever
⋮----
func makeHost(port int, randomness io.Reader) (host.Host, error)
⋮----
// Creates a new RSA key pair for this host.
⋮----
// 0.0.0.0 will listen on any interface device.
⋮----
// libp2p.New constructs a new libp2p Host.
// Other options can be added here.
⋮----
func startPeer(ctx context.Context, h host.Host, streamHandler network.StreamHandler)
⋮----
// Set a function as stream handler.
// This function is called when a peer connects, and starts a stream with this protocol.
// Only applies on the receiving side.
⋮----
// Let's get the actual TCP port from our listen multiaddr, in case we're using 0 (default; random available port).
var port string
⋮----
func startPeerAndConnect(ctx context.Context, h host.Host, destination string) (*bufio.ReadWriter, error)
⋮----
// Turn the destination into a multiaddr.
⋮----
// Extract the peer ID from the multiaddr.
⋮----
// Add the destination's peer multiaddress in the peerstore.
// This will be used during connection and stream creation by libp2p.
⋮----
// Start a stream with the destination.
// Multiaddress of the destination peer is fetched from the peerstore using 'peerId'.
⋮----
// Create a buffered stream so that read and writes are non-blocking.
</file>

<file path="examples/chat/README.md">
# p2p chat app with libp2p

This program demonstrates a simple p2p chat application. It can work between two peers if
1. Both have a private IP address (same network).
2. At least one of them has a public IP address.

Assume if 'A' and 'B' are on different networks host 'A' may or may not have a public IP address but host 'B' has one.

Usage: Run `./chat -sp <SOURCE_PORT>` on host 'B' where <SOURCE_PORT> can be any port number. Now run `./chat -d <MULTIADDR_B>` on node 'A' [`<MULTIADDR_B>` is multiaddress of host 'B' which can be obtained from host 'B' console].

## Build

From the `go-libp2p/examples` directory run the following:

```
> cd chat/
> go build
```

## Usage

On node 'B'

```
> ./chat -sp 3001
Run ./chat -d /ip4/127.0.0.1/tcp/3001/p2p/QmdXGaeGiVA745XorV1jr11RHxB9z4fqykm6xCUPX1aTJo

2018/02/27 01:21:32 Got a new stream!
> hi (received messages in green colour)
> hello (sent messages in white colour)
> no
```

On node 'A'. Replace 127.0.0.1 with <PUBLIC_IP> if node 'B' has one.

```
> ./chat -d /ip4/127.0.0.1/tcp/3001/p2p/QmdXGaeGiVA745XorV1jr11RHxB9z4fqykm6xCUPX1aTJo
Run ./chat -d /ip4/127.0.0.1/tcp/3001/p2p/QmdXGaeGiVA745XorV1jr11RHxB9z4fqykm6xCUPX1aTJo

This node's multiaddress:
/ip4/0.0.0.0/tcp/0/p2p/QmWVx9NwsgaVWMRHNCpesq1WQAw2T3JurjGDNeVNWifPS7
> hi
> hello
```

**NOTE: debug mode is enabled by default, debug mode will always generate the same node id (on each node) on every execution. Disable debug using `--debug false` flag while running your executable.**

**Note:** If you are looking for an implementation with peer discovery, [chat-with-rendezvous](../chat-with-rendezvous), supports peer discovery using a rendezvous point.

## Authors
1. Abhishek Upperwal
</file>

</files>
