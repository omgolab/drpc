This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: examples/testutils/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
examples/
  testutils/
    logharness.go
    net.go
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="examples/testutils/logharness.go">
package testutils
⋮----
import (
	"bufio"
	"bytes"
	"fmt"
	"log"
	"os"
	"strings"
	"testing"
)
⋮----
"bufio"
"bytes"
"fmt"
"log"
"os"
"strings"
"testing"
⋮----
// A LogHarness runs sets of assertions against the log output of a function. Assertions are grouped
// into sequences of messages that are expected to be found in the log output. Calling one of the Expect
// methods on the harness adds an expectation to the default sequence of messages. Additional sequences
// can be created by calling NewSequence.
type LogHarness struct {
	buf       bytes.Buffer
	sequences []*Sequence
}
⋮----
type Expectation interface {
	IsMatch(line string) bool
	String() string
}
⋮----
// Run executes the function f and captures any output written using Go's standard log. Each sequence
// of expected messages is then
func (h *LogHarness) Run(t *testing.T, f func())
⋮----
// Capture raw log output
⋮----
// Expect adds an expectation to the default sequence that the log contains a line equal to s
func (h *LogHarness) Expect(s string)
⋮----
// ExpectPrefix adds an to the default sequence expectation that the log contains a line starting with s
func (h *LogHarness) ExpectPrefix(s string)
⋮----
// NewSequence creates a new sequence of expected log messages
func (h *LogHarness) NewSequence(name string) *Sequence
⋮----
type prefix string
⋮----
func (p prefix) IsMatch(line string) bool
⋮----
func (p prefix) String() string
⋮----
type text string
⋮----
type Sequence struct {
	name string
	exp  []Expectation
}
⋮----
func (seq *Sequence) Assert(t *testing.T, s *bufio.Scanner)
⋮----
var tag string
⋮----
// Match raw log lines against expectations
⋮----
// Expect adds an expectation that the log contains a line equal to s
⋮----
// ExpectPrefix adds an expectation that the log contains a line starting with s
</file>

<file path="examples/testutils/net.go">
package testutils
⋮----
import (
	"fmt"
	"net"
	"testing"
)
⋮----
"fmt"
"net"
"testing"
⋮----
// FindFreePort attempts to find an unused tcp port
func FindFreePort(t *testing.T, host string, maxAttempts int) (int, error)
</file>

</files>
