This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: examples/metrics-and-dashboards/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
examples/
  metrics-and-dashboards/
    compose.yml
    go-libp2p-node.Dockerfile
    main.go
    prometheus.yml
    README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="examples/metrics-and-dashboards/compose.yml">
services:
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../examples/metrics-and-dashboards/prometheus.yml:/etc/prometheus/prometheus.yml
  go-libp2p-node:
    build:
      context: ../examples/metrics-and-dashboards/
      dockerfile: go-libp2p-node.Dockerfile
    ports:
      - 5001:5001
    expose:
      - 5001
</file>

<file path="examples/metrics-and-dashboards/go-libp2p-node.Dockerfile">
FROM golang:alpine
WORKDIR /app
COPY ./main.go .
RUN go mod init example.com/m/v2
RUN go mod tidy
RUN go build main.go
ENTRYPOINT [ "/app/main" ]
</file>

<file path="examples/metrics-and-dashboards/main.go">
package main
⋮----
import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"sync"
	"time"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/protocol/ping"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	rcmgr "github.com/libp2p/go-libp2p/p2p/host/resource-manager"
)
⋮----
"context"
"fmt"
"log"
"math/rand"
"net/http"
"sync"
"time"
⋮----
"github.com/libp2p/go-libp2p"
"github.com/libp2p/go-libp2p/core/peer"
"github.com/libp2p/go-libp2p/p2p/protocol/ping"
"github.com/prometheus/client_golang/prometheus"
"github.com/prometheus/client_golang/prometheus/promhttp"
⋮----
rcmgr "github.com/libp2p/go-libp2p/p2p/host/resource-manager"
⋮----
const ClientCount = 32
⋮----
func main()
⋮----
// Make a bunch of clients that all ping the server at various times
⋮----
func newClient(serverInfo peer.AddrInfo, pings int)
⋮----
// Sleep some random amount of time to spread out the clients so the graphs look more interesting
⋮----
// We just want metrics from the server
</file>

<file path="examples/metrics-and-dashboards/prometheus.yml">
global:
  scrape_interval: 1m

scrape_configs:
  - job_name: "prometheus"
    scrape_interval: 1m
    static_configs:
      - targets: ["localhost:9090"]

  - job_name: "node"
    static_configs:
      - targets: ["node-exporter:9100"]
  - job_name: "go-libp2p"
    metrics_path: /debug/metrics/prometheus
    static_configs:
      - targets: ["go-libp2p-node:5001"]
</file>

<file path="examples/metrics-and-dashboards/README.md">
# Metrics and Dashboards

An example to demonstrate using Prometheus and Grafana to view go-libp2p
metrics. Sets up a Prometheus server and Grafana server via Docker compose. A
small go-libp2p dummy application is included to emit metrics.

Run it with:

```
docker compose -f ../../dashboards/docker-compose.base.yml -f ./compose.yml up
```

Go to http://localhost:3000/dashboards to see the dashboards.
</file>

</files>
